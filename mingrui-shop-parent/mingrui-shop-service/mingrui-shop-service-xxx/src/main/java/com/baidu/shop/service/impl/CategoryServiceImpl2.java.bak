package com.baidu.shop.service.impl;

import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.entity.CategoryEntity;
import com.baidu.shop.mapper.CategoryMapper;
import com.baidu.shop.service.CategoryService;
import com.baidu.shop.utils.ObjectUtil;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.util.List;

/**
 * @ClassName CategoryServiceImpl
 * @Description: TODO
 * @Author liuhaojie
 * @Date 2020/12/22
 * @Version V1.0
 **/
@RestController
public class CategoryServiceImpl extends BaseApiService implements CategoryService {

    @Resource
    private CategoryMapper categoryMapper;

    @Override
    public Result<List<CategoryEntity>> getCategoryByPid(Integer pid) {

        CategoryEntity categoryEntity = new CategoryEntity();
        categoryEntity.setParentId(pid);

        List<CategoryEntity> list = categoryMapper.select(categoryEntity);

        return this.setResultSuccess(list);
    }

    @Transactional
    @Override
    public Result<Object> deleteCategoryById(Integer id) {
        //判断传来的id是否合法 不能为null 也不能为0和负数
        if(ObjectUtil.isNull(id)) return this.setResultError("id不合法");
        //判断 当前数据是否为父节点

        CategoryEntity categoryEntity1 = categoryMapper.selectByPrimaryKey(id);
        if(categoryEntity1.getIsParent() == 1) return this.setResultError("这条数据是父节点");

        if(ObjectUtil.isNull(categoryEntity1)) return this.setResultError("数据不存在");
        //判断当前准备删除的id下的 父节点下还有几个叶子节点

        CategoryEntity categoryEntity = new CategoryEntity();
        categoryEntity.setParentId(categoryEntity1.getParentId());
        List<CategoryEntity> select = categoryMapper.select(categoryEntity);

        //如果叶子节点 <=1 的话 就要吧父类节点的isparent id改为 0（0为子节点）
        if(select.size() <= 1){
            CategoryEntity categoryEntity2 = new CategoryEntity();
            categoryEntity2.setIsParent(0);
            categoryEntity2.setId(categoryEntity1.getParentId());

            categoryMapper.updateByPrimaryKeySelective(categoryEntity2);
        }

        //删除操作
        categoryMapper.deleteByPrimaryKey(id);
        return this.setResultSuccess();
    }
}
